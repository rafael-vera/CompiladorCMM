/* Analizador.java */
/* Generated By:JavaCC: Do not edit this line. Analizador.java */
package modelo;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Stack;
import java.net.URL;

public class Analizador implements AnalizadorConstants {
 public static final int SENTENCIA_FUNCION = 1;
 public static final int SENTENCIA_IF = 2;
 public static final int SENTENCIA_ELSE = 3;
 public static final int SENTENCIA_WHILE = 4;
 public static final int SENTENCIA_FOR = 5;

 public final ArrayList<String> errores = new ArrayList();
 public final HashMap<String, Simbolo> tablaSimbolos = new HashMap();
 private AnalizadorSemantico semantico;
 private CodigoIntermedio intermedio;
 private Funcion funcionIntermedio;
 private Sentencia sentenciaAux;
 private Stack<NotacionPolaca> expresiones = new Stack();
 private Stack<SentenciaCondicional> condicionales = new Stack();
 private Stack<SentenciaWhile> ciclosWhile = new Stack();
 private Stack<SentenciaFor> ciclosFor = new Stack();
 private CodigoObjeto objeto;
 private String alcanceActual;
 private int sentenciaActual;
 private int numArg;

 private URL urlFile;

 public void setUrlFile(URL urlFile) {
  this.urlFile = urlFile;
 }

// Manejo de errores
  final public void L_PARENTHESIS_T() throws ParseException {
    try {
      jj_consume_token(L_PARENTHESIS);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void R_PARENTHESIS_T() throws ParseException {
    try {
      jj_consume_token(R_PARENTHESIS);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void L_BRACE_T() throws ParseException {
    try {
      jj_consume_token(L_BRACE);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void R_BRACE_T() throws ParseException {
    try {
      jj_consume_token(R_BRACE);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void COMMA_T() throws ParseException {
    try {
      jj_consume_token(COMMA);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void SEMICOLON_T() throws ParseException {
    try {
      jj_consume_token(SEMICOLON);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void PLUS_T() throws ParseException {
    try {
      jj_consume_token(PLUS);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void MINUS_T() throws ParseException {
    try {
      jj_consume_token(MINUS);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void MULTIPLY_T() throws ParseException {
    try {
      jj_consume_token(MULTIPLY);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void DIVISION_T() throws ParseException {
    try {
      jj_consume_token(DIVISION);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void MOD_T() throws ParseException {
    try {
      jj_consume_token(MOD);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void EQUAL_T() throws ParseException {
    try {
      jj_consume_token(EQUAL);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void EQUALS_T() throws ParseException {
    try {
      jj_consume_token(EQUALS);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void NOT_EQUALS_T() throws ParseException {
    try {
      jj_consume_token(NOT_EQUALS);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void AND_T() throws ParseException {
    try {
      jj_consume_token(AND);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void OR_T() throws ParseException {
    try {
      jj_consume_token(OR);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void GREATER_T() throws ParseException {
    try {
      jj_consume_token(GREATER);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void GREATER_EQUAL_T() throws ParseException {
    try {
      jj_consume_token(GREATER_EQUAL);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void LESS_T() throws ParseException {
    try {
      jj_consume_token(LESS);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void LESS_EQUAL_T() throws ParseException {
    try {
      jj_consume_token(LESS_EQUAL);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void IMPORT_T() throws ParseException {
    try {
      jj_consume_token(IMPORT);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void IF_T() throws ParseException {
    try {
      jj_consume_token(IF);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void ELSE_IF_T() throws ParseException {
    try {
      jj_consume_token(ELSE_IF);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void ELSE_T() throws ParseException {
    try {
      jj_consume_token(ELSE);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void WHILE_T() throws ParseException {
    try {
      jj_consume_token(WHILE);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void FOR_T() throws ParseException {
    try {
      jj_consume_token(FOR);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void VOID_T() throws ParseException {
    try {
      jj_consume_token(VOID);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void MAIN_T() throws ParseException {
    try {
      jj_consume_token(MAIN);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void RETURN_T() throws ParseException {
    try {
      jj_consume_token(RETURN);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void PRINT_T() throws ParseException {
    try {
      jj_consume_token(PRINT);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void INPUT_T() throws ParseException {
    try {
      jj_consume_token(INPUT);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void INT_T() throws ParseException {
    try {
      jj_consume_token(INT);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void FLOAT_T() throws ParseException {
    try {
      jj_consume_token(FLOAT);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void CHAR_T() throws ParseException {
    try {
      jj_consume_token(CHAR);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void STRING_T() throws ParseException {
    try {
      jj_consume_token(STRING);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void BOOL_T() throws ParseException {
    try {
      jj_consume_token(BOOL);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void INT_V_T() throws ParseException {
    try {
      jj_consume_token(INT_V);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void FLOAT_V_T() throws ParseException {
    try {
      jj_consume_token(FLOAT_V);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void CHAR_V_T() throws ParseException {
    try {
      jj_consume_token(CHAR_V);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void STRING_V_T() throws ParseException {
    try {
      jj_consume_token(STRING_V);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void BOOL_V_T() throws ParseException {
    try {
      jj_consume_token(BOOL_V);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

  final public void IDENTIFIER_T() throws ParseException {
    try {
      jj_consume_token(IDENTIFIER);
    } catch (ParseException ex) {
errores.add(
   ex.toString()
  );
    } catch (TokenMgrError ex) {
errores.add(
   ex.toString()
  );
    }
}

// Analisis sintactico
  final public void analizar() throws ParseException {semantico = new AnalizadorSemantico(errores, tablaSimbolos);
 intermedio = new CodigoIntermedio(errores);
 objeto = new CodigoObjeto(errores, intermedio, tablaSimbolos);
 alcanceActual = "";
 sentenciaActual = SENTENCIA_FUNCION;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IMPORT:{
      importar();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VOID:
      case INT:
      case FLOAT:
      case CHAR:
      case STRING:
      case BOOL:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      funciones();
    }
semantico.mostrarSimbolos();
  intermedio.crearInstrucciones();
  System.out.println(intermedio);
  objeto.compilar(urlFile);
    jj_consume_token(0);
}

  final public void importar() throws ParseException {
    IMPORT_T();
    L_PARENTHESIS_T();
    STRING_V_T();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      COMMA_T();
      STRING_V_T();
    }
    R_PARENTHESIS_T();
}

  final public void tiposFunciones() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VOID:{
      VOID_T();
      break;
      }
    case INT:{
      INT_T();
      break;
      }
    case FLOAT:{
      FLOAT_T();
      break;
      }
    case CHAR:{
      CHAR_T();
      break;
      }
    case STRING:{
      STRING_T();
      break;
      }
    case BOOL:{
      BOOL_T();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void funciones() throws ParseException {int tipo;
    tiposFunciones();
tipo = token.kind;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      funcion(tipo);
      break;
      }
    case MAIN:{
      funcionMain(tipo);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void argumentos() throws ParseException {int tipo;
 numArg = 0;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case FLOAT:
    case CHAR:
    case STRING:
    case BOOL:{
      tiposDatos();
tipo = token.kind;
      IDENTIFIER_T();
semantico.addVariable(token, tipo, alcanceActual, ++numArg);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
        COMMA_T();
        tiposDatos();
tipo = token.kind;
        IDENTIFIER_T();
semantico.addVariable(token, tipo, alcanceActual, ++numArg);
      }
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
}

  final public void retorno(int tipo) throws ParseException {
    RETURN_T();
semantico.addVariable(token, tipo, alcanceActual, 0);
  expresiones.add(
   new NotacionPolaca()
  );

  expresiones.peek()
   .agregarTermino(
    new Termino(
     alcanceActual+"_"+token.image,
     Termino.VALOR
    )
   );

  expresiones.peek()
   .agregarTermino(
    new Termino(
     "=",
     Termino.IGUAL
    )
   );
    valores(tipo);
if( !(errores.size() > 0) ) {
   switch(sentenciaActual) {
    case SENTENCIA_FUNCION: {
     funcionIntermedio.agregarSentencia(
      new SentenciaOperacion(
       expresiones.pop(),
       tablaSimbolos
      )
     );
     break;
    }
    case SENTENCIA_IF: {
     condicionales.peek()
      .agregarSentenciaIf(
       new SentenciaOperacion(
        expresiones.pop(),
        tablaSimbolos
       )
      );
     break;
    }
    case SENTENCIA_ELSE: {
     condicionales.peek()
      .agregarSentenciaElse(
       new SentenciaOperacion(
        expresiones.pop(),
        tablaSimbolos
       )
      );
     break;
    }
    case SENTENCIA_WHILE: {
     ciclosWhile.peek()
      .agregarSentencia(
       new SentenciaOperacion(
        expresiones.pop(),
        tablaSimbolos
       )
      );
     break;
    }
    case SENTENCIA_FOR: {
     ciclosFor.peek()
      .agregarSentencia(
       new SentenciaOperacion(
        expresiones.pop(),
        tablaSimbolos
       )
      );
     break;
    }
   }
  }
    SEMICOLON_T();
}

  final public void funcion(int tipo) throws ParseException {Token func;
    IDENTIFIER_T();
func = token;
  alcanceActual = token.image;
  semantico.addFuncion(func, tipo);
  if( !(errores.size() > 0) ) {
   funcionIntermedio = new Funcion(
    AnalizadorSemantico.ALCANCE_FUNCION+"_"+func.image
   );
   intermedio.agregarFuncion(
    funcionIntermedio
   );
  }
    L_PARENTHESIS_T();
    argumentos();
    R_PARENTHESIS_T();
    L_BRACE_T();
    sentencias();
if(tipo != 27) {
   retorno(tipo);
  }
    R_BRACE_T();
}

  final public void funcionMain(int tipo) throws ParseException {Token func;
    MAIN_T();
func = token;
  alcanceActual = token.image;
  semantico.addFuncion(func, tipo);
  if( !(errores.size() > 0) ) {
   funcionIntermedio = new Funcion(
    AnalizadorSemantico.ALCANCE_FUNCION+"_"+func.image
   );
   intermedio.agregarFuncion(
    funcionIntermedio
   );
  }
    L_PARENTHESIS_T();
    R_PARENTHESIS_T();
    L_BRACE_T();
    sentencias();
if(tipo != 27) {
   retorno(tipo);
  }
    R_BRACE_T();
}

  final public void sentencias() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case WHILE:
      case FOR:
      case PRINT:
      case INPUT:
      case INT:
      case FLOAT:
      case CHAR:
      case STRING:
      case BOOL:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRINT:
      case INPUT:
      case INT:
      case FLOAT:
      case CHAR:
      case STRING:
      case BOOL:
      case IDENTIFIER:{
        instrucciones();
        break;
        }
      case IF:
      case WHILE:
      case FOR:{
        ciclos();
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void instrucciones() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case FLOAT:
    case CHAR:
    case STRING:
    case BOOL:{
      variable();
      break;
      }
    case IDENTIFIER:{
      asignacion(true);
      break;
      }
    case PRINT:{
      imprimir();
      break;
      }
    case INPUT:{
      leer();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    SEMICOLON_T();
}

  final public void ciclos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:{
      condicionIf();
      break;
      }
    case WHILE:{
      cicloWhile();
      break;
      }
    case FOR:{
      cicloFor();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void tiposDatos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      INT_T();
      break;
      }
    case FLOAT:{
      FLOAT_T();
      break;
      }
    case CHAR:{
      CHAR_T();
      break;
      }
    case STRING:{
      STRING_T();
      break;
      }
    case BOOL:{
      BOOL_T();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void valoresTiposDatos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT_V:{
      INT_V_T();
      break;
      }
    case FLOAT_V:{
      FLOAT_V_T();
      break;
      }
    case CHAR_V:{
      CHAR_V_T();
      break;
      }
    case STRING_V:{
      STRING_V_T();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public int parametrosFuncion(String alcance, Termino termino) throws ParseException {int argsIngresados = 0;
 int tipo = semantico.obtenerTipoArgumento(alcance, argsIngresados + 1);
expresiones.add(
   new NotacionPolaca()
  );

  expresiones.peek()
   .agregarTermino(
    new Termino(
     semantico.obtenerNombreArgumento(alcance, argsIngresados + 1),
     Termino.VALOR
    )
   );

  expresiones.peek()
   .agregarTermino(
    new Termino(
     "=",
     Termino.IGUAL
    )
   );
    valores(tipo);
termino.agregarParametro(
   expresiones.pop()
  );
  argsIngresados++;
  tipo = semantico.obtenerTipoArgumento(alcance, argsIngresados + 1);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      COMMA_T();
expresiones.add(
    new NotacionPolaca()
   );

   expresiones.peek()
    .agregarTermino(
     new Termino(
      semantico.obtenerNombreArgumento(alcance, argsIngresados + 1),
      Termino.VALOR
     )
    );

   expresiones.peek()
    .agregarTermino(
     new Termino(
      "=",
      Termino.IGUAL
     )
    );
      valores(tipo);
termino.agregarParametro(
    expresiones.pop()
   );
   argsIngresados++;
   tipo = semantico.obtenerTipoArgumento(alcance, argsIngresados + 1);
    }
{if ("" != null) return argsIngresados;}
    throw new Error("Missing return statement in function");
}

  final public void simbolo(Integer[] tipos) throws ParseException {Token var;
 boolean isVar = true;
 boolean errorFuncion = false;
 Termino termino;
 int tipoFuncVar = -1;
 int totalArgs = -1;
 int argsIngresados = 0;
    IDENTIFIER_T();
var = token;
  termino = new Termino(
   alcanceActual + "_" + var.image,
   Termino.VALOR
  );
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case L_PARENTHESIS:{
      L_PARENTHESIS_T();
isVar = false;
   termino = new Termino(
    AnalizadorSemantico.ALCANCE_FUNCION + "_" + var.image,
    Termino.FUNCION
   );
   // Checar si tiene parametros.
   totalArgs = semantico.tieneParametros(var);
   // Si los tiene mandar a llamar a parametrosFuncion()
   if(totalArgs > 0) {
    argsIngresados = parametrosFuncion(var.image, termino);
   }
   // Si no solo seguir al parenthesis

      R_PARENTHESIS_T();
// Checar si no falta o sobra argumentos
   if(totalArgs != -1) {
    semantico.comprobarTotalArgumentos(token, totalArgs, argsIngresados);
   }
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
if(isVar) {
   tipoFuncVar = semantico.obtenerTipo(var, alcanceActual);
  } else {
   if(totalArgs != -1) {
    tipoFuncVar = semantico.obtenerTipo(var, "global");
   }
  }

  if(tipoFuncVar != -1) {
   semantico.checarTipoFuncVar(
    var.image,
    tipos,
    tipoFuncVar,
    var.beginLine,
    var.beginColumn,
    isVar
   );
   expresiones.peek()
    .agregarTermino(
     termino
    );
  }
}

  final public void signosOperacion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:{
      PLUS_T();
expresiones.peek()
   .agregarTermino(
    new Termino(
     token.image,
     Termino.SUMA_RESTA
    )
   );
      break;
      }
    case MINUS:{
      MINUS_T();
expresiones.peek()
   .agregarTermino(
    new Termino(
     token.image,
     Termino.SUMA_RESTA
    )
   );
      break;
      }
    case MULTIPLY:{
      MULTIPLY_T();
expresiones.peek()
   .agregarTermino(
    new Termino(
     token.image,
     Termino.MUL_DIV
    )
   );
      break;
      }
    case DIVISION:{
      DIVISION_T();
expresiones.peek()
   .agregarTermino(
    new Termino(
     token.image,
     Termino.MUL_DIV
    )
   );
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void signosOperacionBool() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUALS:{
      EQUALS_T();
      break;
      }
    case NOT_EQUALS:{
      NOT_EQUALS_T();
      break;
      }
    case GREATER:{
      GREATER_T();
      break;
      }
    case GREATER_EQUAL:{
      GREATER_EQUAL_T();
      break;
      }
    case LESS:{
      LESS_T();
      break;
      }
    case LESS_EQUAL:{
      LESS_EQUAL_T();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void valores(int tipo) throws ParseException {
if(tipo == 36) {
   valoresBooleanos();
  } else {
   valoresGenerales(tipo);
  }
}

  final public void valoresGenerales(int tipo) throws ParseException {Integer[] tipos = {tipo};
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT_V:
    case FLOAT_V:
    case CHAR_V:
    case STRING_V:{
      valoresTiposDatos();
semantico.checarTipoValor(tipo, token);
   expresiones.peek()
    .agregarTermino(
     new Termino(
      token.image,
      Termino.VALOR
     )
    );
      break;
      }
    case IDENTIFIER:{
      simbolo(tipos);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:
      case MULTIPLY:
      case DIVISION:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_6;
      }
      signosOperacion();
semantico.checarTipoOperacion(tipo, token);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT_V:
      case FLOAT_V:
      case CHAR_V:
      case STRING_V:{
        valoresTiposDatos();
semantico.checarTipoValor(tipo, token);
    expresiones.peek()
     .agregarTermino(
      new Termino(
       token.image,
       Termino.VALOR
      )
     );
        break;
        }
      case IDENTIFIER:{
        simbolo(tipos);
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void valoresBooleanos() throws ParseException {Integer[] tipos = {32, 33, 34, 35, 36};
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOL_V:{
      BOOL_V_T();
expresiones.peek()
   .agregarTermino(
    new Termino(
     token.image,
     Termino.VALOR
    )
   );
      break;
      }
    case INT_V:
    case FLOAT_V:
    case CHAR_V:
    case STRING_V:
    case IDENTIFIER:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT_V:
      case FLOAT_V:
      case CHAR_V:
      case STRING_V:{
        valoresTiposDatos();
expresiones.peek()
     .agregarTermino(
      new Termino(
       token.image,
       Termino.VALOR
      )
     );
        break;
        }
      case IDENTIFIER:{
        simbolo(tipos);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      signosOperacionBool();
expresiones.peek()
    .agregarTermino(
     new Termino(
      token.image,
      Termino.OP_LOGICO
     )
    );
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT_V:
      case FLOAT_V:
      case CHAR_V:
      case STRING_V:{
        valoresTiposDatos();
expresiones.peek()
     .agregarTermino(
      new Termino(
       token.image,
       Termino.VALOR
      )
     );
        break;
        }
      case IDENTIFIER:{
        simbolo(tipos);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AND:
        case OR:{
          ;
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AND:{
          AND_T();
          break;
          }
        case OR:{
          OR_T();
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
expresiones.peek()
     .agregarTermino(
      new Termino(
       token.image,
       Termino.CONCATENACION_LOG
      )
     );
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT_V:
        case FLOAT_V:
        case CHAR_V:
        case STRING_V:{
          valoresTiposDatos();
expresiones.peek()
      .agregarTermino(
       new Termino(
        token.image,
        Termino.VALOR
       )
      );
          break;
          }
        case IDENTIFIER:{
          simbolo(tipos);
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        signosOperacionBool();
expresiones.peek()
     .agregarTermino(
      new Termino(
       token.image,
       Termino.OP_LOGICO
      )
     );
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT_V:
        case FLOAT_V:
        case CHAR_V:
        case STRING_V:{
          valoresTiposDatos();
expresiones.peek()
      .agregarTermino(
       new Termino(
        token.image,
        Termino.VALOR
       )
      );
          break;
          }
        case IDENTIFIER:{
          simbolo(tipos);
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void variable() throws ParseException {Token t;
 int tipo;
    tiposDatos();
tipo = token.kind;
    IDENTIFIER_T();
t = token;
   semantico.addVariable(t, tipo, alcanceActual, 0);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUAL:{
      EQUAL_T();
expresiones.add(
     new NotacionPolaca()
    );

    expresiones.peek()
     .agregarTermino(
      new Termino(
       alcanceActual+"_"+t.image,
       Termino.VALOR
      )
     );

    expresiones.peek()
     .agregarTermino(
      new Termino(
       token.image,
       Termino.IGUAL
      )
     );
      valores(tipo);
if( !(errores.size() > 0) ) {
     switch(sentenciaActual) {
      case SENTENCIA_FUNCION: {
       funcionIntermedio.agregarSentencia(
        new SentenciaOperacion(
         expresiones.pop(),
         tablaSimbolos
        )
       );
       break;
      }
      case SENTENCIA_IF: {
       condicionales.peek()
        .agregarSentenciaIf(
         new SentenciaOperacion(
          expresiones.pop(),
          tablaSimbolos
         )
        );
       break;
      }
      case SENTENCIA_ELSE: {
       condicionales.peek()
        .agregarSentenciaElse(
         new SentenciaOperacion(
          expresiones.pop(),
          tablaSimbolos
         )
        );
       break;
      }
      case SENTENCIA_WHILE: {
       ciclosWhile.peek()
        .agregarSentencia(
         new SentenciaOperacion(
          expresiones.pop(),
          tablaSimbolos
         )
        );
       break;
      }
      case SENTENCIA_FOR: {
       ciclosFor.peek()
        .agregarSentencia(
         new SentenciaOperacion(
          expresiones.pop(),
          tablaSimbolos
         )
        );
       break;
      }
     }
    }
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        break label_8;
      }
      COMMA_T();
      IDENTIFIER_T();
t = token;
    semantico.addVariable(t, tipo, alcanceActual, 0);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUAL:{
        EQUAL_T();
expresiones.add(
      new NotacionPolaca()
     );

     expresiones.peek()
      .agregarTermino(
       new Termino(
        alcanceActual+"_"+t.image,
        Termino.VALOR
       )
      );

     expresiones.peek()
      .agregarTermino(
       new Termino(
        token.image,
        Termino.IGUAL
       )
      );
        valores(tipo);
if( !(errores.size() > 0) ) {
      switch(sentenciaActual) {
       case SENTENCIA_FUNCION: {
        funcionIntermedio.agregarSentencia(
         new SentenciaOperacion(
          expresiones.pop(),
          tablaSimbolos
         )
        );
        break;
       }
       case SENTENCIA_IF: {
        condicionales.peek()
         .agregarSentenciaIf(
          new SentenciaOperacion(
           expresiones.pop(),
           tablaSimbolos
          )
         );
        break;
       }
       case SENTENCIA_ELSE: {
        condicionales.peek()
         .agregarSentenciaElse(
          new SentenciaOperacion(
           expresiones.pop(),
           tablaSimbolos
          )
         );
        break;
       }
       case SENTENCIA_WHILE: {
        ciclosWhile.peek()
         .agregarSentencia(
          new SentenciaOperacion(
           expresiones.pop(),
           tablaSimbolos
          )
         );
        break;
       }
       case SENTENCIA_FOR: {
        ciclosFor.peek()
         .agregarSentencia(
          new SentenciaOperacion(
           expresiones.pop(),
           tablaSimbolos
          )
         );
        break;
       }
      }
     }
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        ;
      }
    }
}

  final public void asignacion(boolean agregarSentencia) throws ParseException {Token t;
 int tipo;
 int totalArgs = -1;
 int argsIngresados = 0;
 Termino termino;
    IDENTIFIER_T();
t = token;
  expresiones.add(
   new NotacionPolaca()
  );
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUAL:{
      EQUAL_T();
tipo = semantico.obtenerTipo(t, alcanceActual);
    expresiones.peek()
     .agregarTermino(
      new Termino(
       alcanceActual+"_"+t.image,
       Termino.VALOR
      )
     );

    expresiones.peek()
     .agregarTermino(
      new Termino(
       token.image,
       Termino.IGUAL
      )
     );
      valores(tipo);
if( !(errores.size() > 0) && agregarSentencia ) {
     switch(sentenciaActual) {
      case SENTENCIA_FUNCION: {
       funcionIntermedio.agregarSentencia(
        new SentenciaOperacion(
         expresiones.pop(),
         tablaSimbolos
        )
       );
       break;
      }
      case SENTENCIA_IF: {
       condicionales.peek()
        .agregarSentenciaIf(
         new SentenciaOperacion(
          expresiones.pop(),
          tablaSimbolos
         )
        );
       break;
      }
      case SENTENCIA_ELSE: {
       condicionales.peek()
        .agregarSentenciaElse(
         new SentenciaOperacion(
          expresiones.pop(),
          tablaSimbolos
         )
        );
       break;
      }
      case SENTENCIA_WHILE: {
       ciclosWhile.peek()
        .agregarSentencia(
         new SentenciaOperacion(
          expresiones.pop(),
          tablaSimbolos
         )
        );
       break;
      }
      case SENTENCIA_FOR: {
       ciclosFor.peek()
        .agregarSentencia(
         new SentenciaOperacion(
          expresiones.pop(),
          tablaSimbolos
         )
        );
       break;
      }
     }
    }
      break;
      }
    case L_PARENTHESIS:{
      L_PARENTHESIS_T();
termino = new Termino(
     AnalizadorSemantico.ALCANCE_FUNCION + "_" + t.image,
     Termino.FUNCION
    );
    totalArgs = semantico.tieneParametros(t);
    if(totalArgs > 0) {
     argsIngresados = parametrosFuncion(t.image, termino);
    }
      R_PARENTHESIS_T();
if(totalArgs != -1) {
     semantico.comprobarTotalArgumentos(token, totalArgs, argsIngresados);
     if( !(errores.size() > 0) ) {
      expresiones.peek()
       .agregarTermino(
        termino
       );
      switch(sentenciaActual) {
       case SENTENCIA_FUNCION: {
        funcionIntermedio.agregarSentencia(
         new SentenciaOperacion(
          expresiones.pop(),
          tablaSimbolos
         )
        );
        break;
       }
       case SENTENCIA_IF: {
        condicionales.peek()
         .agregarSentenciaIf(
          new SentenciaOperacion(
           expresiones.pop(),
           tablaSimbolos
          )
         );
        break;
       }
       case SENTENCIA_ELSE: {
        condicionales.peek()
         .agregarSentenciaElse(
          new SentenciaOperacion(
           expresiones.pop(),
           tablaSimbolos
          )
         );
        break;
       }
       case SENTENCIA_WHILE: {
        ciclosWhile.peek()
         .agregarSentencia(
          new SentenciaOperacion(
           expresiones.pop(),
           tablaSimbolos
          )
         );
        break;
       }
       case SENTENCIA_FOR: {
        ciclosFor.peek()
         .agregarSentencia(
          new SentenciaOperacion(
           expresiones.pop(),
           tablaSimbolos
          )
         );
        break;
       }
      }
     }
    }
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void condicionIf() throws ParseException {int antSentencia = sentenciaActual;
    IF_T();
sentenciaActual = SENTENCIA_IF;
  expresiones.add(
   new NotacionPolaca()
  );
    L_PARENTHESIS_T();
    valoresBooleanos();
    R_PARENTHESIS_T();
condicionales.add(
   new SentenciaCondicional(
    tablaSimbolos
   )
  );

  condicionales.peek()
   .agregarCondicionSentenciaIf(
    new SentenciaOperacion(
     expresiones.pop(),
     tablaSimbolos
    )
   );
    L_BRACE_T();
    sentencias();
    R_BRACE_T();
// Que hacer cuando termina mi condicional if
  sentenciaActual = antSentencia;
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE_IF:{
        ;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        break label_9;
      }
      ELSE_IF_T();
// Que hacer antes de iniciar un else if
   antSentencia = sentenciaActual;
   sentenciaActual = SENTENCIA_IF;
   expresiones.add(
    new NotacionPolaca()
   );
      L_PARENTHESIS_T();
      valoresBooleanos();
      R_PARENTHESIS_T();
condicionales.peek()
    .agregarCondicionSentenciaIf(
     new SentenciaOperacion(
      expresiones.pop(),
      tablaSimbolos
     )
    );
      L_BRACE_T();
      sentencias();
      R_BRACE_T();
// Que hacer cuando termina un else if
   sentenciaActual = antSentencia;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      ELSE_T();
sentenciaActual = SENTENCIA_ELSE;
      L_BRACE_T();
      sentencias();
      R_BRACE_T();
// Que hacer cuando termina un else
   sentenciaActual = antSentencia;
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      ;
    }
SentenciaCondicional aux = condicionales.pop();
  switch(sentenciaActual) {
   case SENTENCIA_FUNCION: {
    funcionIntermedio.agregarSentencia(
     aux
    );
    break;
   }
   case SENTENCIA_IF: {
    condicionales.peek()
     .agregarSentenciaIf(
      aux
     );
    break;
   }
   case SENTENCIA_ELSE: {
    condicionales.peek()
     .agregarSentenciaElse(
      aux
     );
    break;
   }
   case SENTENCIA_WHILE: {
    ciclosWhile.peek()
     .agregarSentencia(
      aux
     );
    break;
   }
   case SENTENCIA_FOR: {
    ciclosFor.peek()
     .agregarSentencia(
      aux
     );
    break;
   }
  }
}

  final public void cicloWhile() throws ParseException {int antSentencia = sentenciaActual;
    WHILE_T();
sentenciaActual = SENTENCIA_WHILE;
  expresiones.add(
   new NotacionPolaca()
  );
    L_PARENTHESIS_T();
    valoresBooleanos();
    R_PARENTHESIS_T();
ciclosWhile.add(
   new SentenciaWhile(
    new SentenciaOperacion(
     expresiones.pop(),
     tablaSimbolos
    ),
    tablaSimbolos
   )
  );
    L_BRACE_T();
    sentencias();
    R_BRACE_T();
sentenciaActual = antSentencia;
  SentenciaWhile aux = ciclosWhile.pop();
  switch(sentenciaActual) {
   case SENTENCIA_FUNCION: {
    funcionIntermedio.agregarSentencia(
     aux
    );
    break;
   }
   case SENTENCIA_IF: {
    condicionales.peek()
     .agregarSentenciaIf(
      aux
     );
    break;
   }
   case SENTENCIA_ELSE: {
    condicionales.peek()
     .agregarSentenciaElse(
      aux
     );
    break;
   }
   case SENTENCIA_WHILE: {
    ciclosWhile.peek()
     .agregarSentencia(
      aux
     );
    break;
   }
   case SENTENCIA_FOR: {
    ciclosFor.peek()
     .agregarSentencia(
      aux
     );
    break;
   }
  }
}

  final public void cicloFor() throws ParseException {int antSentencia = sentenciaActual;
 SentenciaOperacion asignacionInicial;
 SentenciaOperacion condicion;
 SentenciaOperacion asignacionFinal;
    FOR_T();
sentenciaActual = SENTENCIA_FOR;
    L_PARENTHESIS_T();
    asignacion(false);
asignacionInicial = new SentenciaOperacion(
   expresiones.pop(),
   tablaSimbolos
  );

  expresiones.add(
   new NotacionPolaca()
  );
    SEMICOLON_T();
    valoresBooleanos();
condicion = new SentenciaOperacion(
   expresiones.pop(),
   tablaSimbolos
  );
    SEMICOLON_T();
    asignacion(false);
asignacionFinal = new SentenciaOperacion(
   expresiones.pop(),
   tablaSimbolos
  );
    R_PARENTHESIS_T();
ciclosFor.add(
   new SentenciaFor(
    asignacionInicial,
    condicion,
    asignacionFinal,
    tablaSimbolos
   )
  );
    L_BRACE_T();
    sentencias();
    R_BRACE_T();
sentenciaActual = antSentencia;
  SentenciaFor aux = ciclosFor.pop();
  switch(sentenciaActual) {
   case SENTENCIA_FUNCION: {
    funcionIntermedio.agregarSentencia(
     aux
    );
    break;
   }
   case SENTENCIA_IF: {
    condicionales.peek()
     .agregarSentenciaIf(
      aux
     );
    break;
   }
   case SENTENCIA_ELSE: {
    condicionales.peek()
     .agregarSentenciaElse(
      aux
     );
    break;
   }
   case SENTENCIA_WHILE: {
    ciclosWhile.peek()
     .agregarSentencia(
      aux
     );
    break;
   }
   case SENTENCIA_FOR: {
    ciclosFor.peek()
     .agregarSentencia(
      aux
     );
    break;
   }
  }
}

  final public void imprimir() throws ParseException {Termino termino;
 Integer[] tipos = {32, 33, 34, 35, 36};
    PRINT_T();
termino = new Termino(
   token.image,
   Termino.FUNCION
  );

  expresiones.add(
   new NotacionPolaca()
  );
    L_PARENTHESIS_T();
expresiones.add(
   new NotacionPolaca()
  );
    simbolo(tipos);
if( !(errores.size() > 0) ) {
    termino.agregarParametro(
     expresiones.pop()
    );
   }
    R_PARENTHESIS_T();
if( !(errores.size() > 0) ) {
   expresiones.peek()
    .agregarTermino(
     termino
    );

   switch(sentenciaActual) {
    case SENTENCIA_FUNCION: {
     funcionIntermedio.agregarSentencia(
      new SentenciaOperacion(
       expresiones.pop(),
       tablaSimbolos
      )
     );
     break;
    }
    case SENTENCIA_IF: {
     condicionales.peek()
      .agregarSentenciaIf(
       new SentenciaOperacion(
        expresiones.pop(),
        tablaSimbolos
       )
      );
     break;
    }
    case SENTENCIA_ELSE: {
     condicionales.peek()
      .agregarSentenciaElse(
       new SentenciaOperacion(
        expresiones.pop(),
        tablaSimbolos
       )
      );
     break;
    }
    case SENTENCIA_WHILE: {
     ciclosWhile.peek()
      .agregarSentencia(
       new SentenciaOperacion(
        expresiones.pop(),
        tablaSimbolos
       )
      );
     break;
    }
    case SENTENCIA_FOR: {
     ciclosFor.peek()
      .agregarSentencia(
       new SentenciaOperacion(
        expresiones.pop(),
        tablaSimbolos
       )
      );
     break;
    }
   }
  }
}

  final public void leer() throws ParseException {Termino termino;
    INPUT_T();
termino = new Termino(
   token.image,
   Termino.FUNCION
  );

  expresiones.add(
   new NotacionPolaca()
  );
    L_PARENTHESIS_T();
    IDENTIFIER_T();
if( !(errores.size() > 0) ) {
   expresiones.add(
    new NotacionPolaca()
   );

   expresiones.peek()
    .agregarTermino(
     new Termino(
      alcanceActual+"_"+token.image,
      Termino.VALOR
     )
    );

   termino.agregarParametro(
    expresiones.pop()
   );
  }
    R_PARENTHESIS_T();
if( !(errores.size() > 0) ) {
   expresiones.peek()
    .agregarTermino(
     termino
    );

   switch(sentenciaActual) {
    case SENTENCIA_FUNCION: {
     funcionIntermedio.agregarSentencia(
      new SentenciaOperacion(
       expresiones.pop(),
       tablaSimbolos
      )
     );
     break;
    }
    case SENTENCIA_IF: {
     condicionales.peek()
      .agregarSentenciaIf(
       new SentenciaOperacion(
        expresiones.pop(),
        tablaSimbolos
       )
      );
     break;
    }
    case SENTENCIA_ELSE: {
     condicionales.peek()
      .agregarSentenciaElse(
       new SentenciaOperacion(
        expresiones.pop(),
        tablaSimbolos
       )
      );
     break;
    }
    case SENTENCIA_WHILE: {
     ciclosWhile.peek()
      .agregarSentencia(
       new SentenciaOperacion(
        expresiones.pop(),
        tablaSimbolos
       )
      );
     break;
    }
    case SENTENCIA_FOR: {
     ciclosFor.peek()
      .agregarSentencia(
       new SentenciaOperacion(
        expresiones.pop(),
        tablaSimbolos
       )
      );
     break;
    }
   }
  }
}

  /** Generated Token Manager. */
  public AnalizadorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[33];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x200000,0x8000000,0x20,0x8000000,0x10000000,0x20,0x0,0xc6400000,0xc6400000,0xc0000000,0x6400000,0x0,0x0,0x20,0x2,0x780,0x1e6000,0x0,0x780,0x0,0x0,0x0,0x18000,0x18000,0x0,0x0,0x0,0x1000,0x20,0x1000,0x1002,0x800000,0x1000000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x1f,0x0,0x1f,0x400,0x0,0x1f,0x41f,0x41f,0x41f,0x0,0x1f,0x1e0,0x0,0x0,0x0,0x0,0x5e0,0x0,0x5e0,0x5e0,0x5e0,0x0,0x0,0x5e0,0x5e0,0x7e0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}

  /** Constructor with InputStream. */
  public Analizador(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Analizador(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new AnalizadorTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Analizador(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new AnalizadorTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new AnalizadorTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Analizador(AnalizadorTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[52];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 33; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 52; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
